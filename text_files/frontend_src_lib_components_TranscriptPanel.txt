<script>
    import { onMount, afterUpdate } from 'svelte';
    
    // Props
    // Define transcript interface to avoid type errors
    export let transcript = /** @type {{ 
        lines: Array<{ id: string, number: number, text: string }>,
        notes: Array<{ type: string, content: string }>,
        illustrations?: Array<{ type: string, content: string }>,
        translation: Array<{ number: number, text: string }>
    } | null} */ (null);
    export let segmentation = /** @type {{ regions: Array<any> } | null} */ (null);
    export let transcriptLoading = false;
    export let highlightedLine = null;
    export let activeSegment = null;
    export let onLineHover = (id) => {};
    export let onLineClick = (id) => {};
    
    // State
    let expandedSection = 'primary';
    let transcriptContainer;
    
    // Scroll to active segment when clicking on image segment
    $: if (transcriptContainer && activeSegment) {
        const lineElement = document.getElementById(`transcript-line-${activeSegment}`);
        if (lineElement) {
            // Use a small timeout to ensure the DOM has updated
            setTimeout(() => {
                lineElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }, 50);
        }
    }
    
    // Track which line was previously active to prevent excessive scrolling
    let previousActiveSegment = null;
    
    $: if (activeSegment !== previousActiveSegment) {
        previousActiveSegment = activeSegment;
    }
    
    // Toggle a section
    function toggleSection(section) {
        expandedSection = expandedSection === section ? null : section;
    }
    
    // Handle line interactions
    function handleLineMouseEnter(lineId) {
        if (onLineHover) {
            onLineHover(lineId);
        }
    }
    
    function handleLineMouseLeave() {
        if (onLineHover) {
            onLineHover(null);
        }
    }
    
    function handleLineClick(lineId) {
        if (onLineClick) {
            onLineClick(lineId);
        }
    }
</script>

<div class="transcript-panel">
    <div class="panel-header">
        <div class="header-tabs">
            <button 
                class="tab-button {expandedSection === 'primary' ? 'active' : ''}"
                on:click={() => toggleSection('primary')}
            >
                Transcript
            </button>
            <button 
                class="tab-button {expandedSection === 'notes' ? 'active' : ''}"
                on:click={() => toggleSection('notes')}
            >
                Notes & Illustrations
            </button>
            <button 
                class="tab-button {expandedSection === 'translation' ? 'active' : ''}"
                on:click={() => toggleSection('translation')}
            >
                Translation
            </button>
        </div>
    </div>
    
    <div class="panel-content" bind:this={transcriptContainer}>
        {#if transcriptLoading}
            <div class="loading-state">
                <div class="spinner"></div>
                <p>Loading transcript data...</p>
            </div>
        {:else if !transcript}
            <div class="empty-state">
                <p>No transcript data available for this page.</p>
            </div>
        {:else if expandedSection === 'primary'}
            <!-- Primary transcript section -->
            <div class="transcript-content">
                {#if transcript && transcript.lines && Array.isArray(transcript.lines) && transcript.lines.length > 0}
                    {#each transcript.lines as line, index}
                        {@const lineId = line.id || `line-${index}`}
                        {@const isHighlighted = lineId === highlightedLine}
                        {@const isActive = lineId === activeSegment}
                        
                        <div 
                            id="transcript-line-{lineId}"
                            class="transcript-line {isHighlighted ? 'highlighted' : ''} {isActive ? 'active' : ''}"
                            on:mouseenter={() => handleLineMouseEnter(lineId)}
                            on:mouseleave={handleLineMouseLeave}
                            on:click={() => handleLineClick(lineId)}
                        >
                            <div class="line-number">{line.number || index + 1}</div>
                            <div class="line-text">{line.text || 'No text available'}</div>
                        </div>
                    {/each}
                {:else}
                    <p class="no-content">No transcript lines available.</p>
                {/if}
            </div>
        {:else if expandedSection === 'notes'}
            <!-- Notes and illustrations section -->
            <div class="transcript-content">
                {#if transcript && transcript.notes && Array.isArray(transcript.notes) && transcript.notes.length > 0}
                    <!-- Group notes by type -->
                    {#each [...new Set(transcript.notes.map(note => note.type))].sort() as noteType}
                        <div class="note-group">
                            <h3 class="note-group-title">{noteType}</h3>
                            {#each transcript.notes.filter(note => note.type === noteType) as note}
                                <div class="note-item">
                                    <div class="note-content">
                                        {#if note.content.includes('\n')}
                                            {#each note.content.split('\n') as paragraph}
                                                <p>{paragraph}</p>
                                            {/each}
                                        {:else}
                                            <p>{note.content || 'No content available'}</p>
                                        {/if}
                                    </div>
                                </div>
                            {/each}
                        </div>
                    {/each}
                {:else}
                    <p class="no-content">No notes or illustrations available.</p>
                {/if}
            </div>
        {:else if expandedSection === 'translation'}
            <!-- Translation section -->
            <div class="transcript-content">
                {#if transcript && transcript.translation && Array.isArray(transcript.translation) && transcript.translation.length > 0}
                    <!-- Display translation split by paragraphs -->
                    {#each transcript.translation as line}
                        {#if line.text}
                            {#each line.text.split('\n\n') as paragraph, pIndex}
                                <div class="translation-paragraph">
                                    {#each paragraph.split('\n') as textLine, lineIndex}
                                        <div class="translation-line">
                                            {#if lineIndex === 0 && pIndex > 0}
                                                <div class="paragraph-break"></div>
                                            {/if}
                                            <div class="line-text">{textLine || 'No text available'}</div>
                                        </div>
                                    {/each}
                                </div>
                            {/each}
                        {/if}
                    {/each}
                {:else}
                    <p class="no-content">No translation available.</p>
                {/if}
            </div>
        {/if}
    </div>
</div>

<style>
    .transcript-panel {
        display: flex;
        flex-direction: column;
        height: 100%;
        background: white;
        border-left: 1px solid #e2e8f0;
        overflow: hidden; /* Prevent overflow from affecting parent */
    }
    
    .panel-header {
        padding: 0.75rem;
        border-bottom: 1px solid #e2e8f0;
        background: #f8fafc;
        flex-shrink: 0; /* Prevent header from shrinking */
    }
    
    .header-tabs {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap; /* Allow tabs to wrap on smaller screens */
    }
    
    .tab-button {
        padding: 0.5rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 4px;
        background: white;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .tab-button:hover {
        background: #f1f5f9;
    }
    
    .tab-button.active {
        background: #4a9eff;
        color: white;
        border-color: #4a9eff;
    }
    
    .panel-content {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        height: 0; /* Force to take available space */
        min-height: 0; /* Allow container to shrink */
    }
    
    .transcript-content {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }
    
    .transcript-line {
        display: flex;
        padding: 0.5rem;
        border-radius: 4px;
        cursor: pointer;
        transition: background 0.2s ease;
    }
    
    .transcript-line:hover {
        background: rgba(74, 158, 255, 0.05);
    }
    
    .transcript-line.highlighted {
        background: rgba(74, 158, 255, 0.1);
    }
    
    .transcript-line.active {
        background: rgba(74, 158, 255, 0.2);
        border-left: 3px solid #4a9eff;
    }
    
    .line-number {
        min-width: 2rem;
        color: #718096;
        font-size: 0.875rem;
        font-family: monospace;
    }
    
    .line-text {
        flex: 1;
        font-family: 'EB Garamond', serif;
        line-height: 1.5;
    }
    
    .note-group {
        margin-bottom: 1.5rem;
    }
    
    .note-group-title {
        font-weight: 600;
        margin-bottom: 0.75rem;
        padding-bottom: 0.25rem;
        border-bottom: 1px solid #e2e8f0;
        color: #4a5568;
        font-size: 1rem;
    }
    
    .note-item {
        padding: 0.75rem;
        border: 1px solid #e2e8f0;
        border-radius: 4px;
        margin-bottom: 0.75rem;
        background: #f8fafc;
    }
    
    .note-type {
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #4a5568;
        font-size: 0.875rem;
    }
    
    .note-content {
        font-family: 'EB Garamond', serif;
        line-height: 1.5;
    }
    
    .note-content p {
        margin-bottom: 0.5rem;
    }
    
    .note-content p:last-child {
        margin-bottom: 0;
    }
    
    .translation-paragraph {
        margin-bottom: 1rem;
    }
    
    .translation-line {
        display: flex;
        padding: 0.5rem;
        border-radius: 4px;
    }
    
    .paragraph-break {
        height: 0.5rem;
    }
    
    .no-content {
        color: #718096;
        font-style: italic;
        text-align: center;
        padding: 2rem 0;
    }
    
    .loading-state, .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        color: #718096;
    }
    
    .spinner {
        width: 30px;
        height: 30px;
        border: 3px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-left-color: #4a9eff;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>